k8s部署操作手册
node节点CPU、MEM的大小直接影响是否可以顺利部署pod
安装部分：
1.新建kubernetes repo源
vim /etc/yum.repos.d/kubernetes.repo
#内容
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg

2.关闭setenforce 服务
setenforce 0

3.安装相关服务并启动
yum install -y docker kubelet kubeadm kubectl kubernetes-cni
systemctl enable docker && systemctl start docker
systemctl enable kubelet && systemctl start kubelet

4.初始化master
【preflight】 环境检查swap是否关闭，内核大小是否足够，拉取组件镜像
【certs】生成k8s、Etcd证书（启用Https）证书目录/etc/kubernetes/pki
【kubeconfig】生成kubeconfig文件，认证文件
【kubelet-start】生成kubelet配置文件，并启动/var/lib/kubelet/kubeadm-flags.env   /var/lib/kubelet/config.yaml
【control-plane】部署管理节点组件，用镜像启动容器 /etc/kubernetes/manifests
【etcd】部署etcd数据库，用镜像启动容器
【upload-config】【kubelet】【upload-certs】上传配置文件及证书，存储到k8s
【mark-control-plane】为管理节点添加标签，添加的一个污点node-role.kubernetes.io/master 目的不要让容器分配到master
【bootstrap-token】【kubelet-finalize】为其他节点kubelet自动颁发证书使用
【addons】插件部署CoreDNS、kube-proxy

kubeadm init   kubeadm reset（重置）
kubeadm init --apiserver-advertise-address=10.0.3.5 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16
指定aipserverIP以及国内可使用的docker可用源
	初始化时可能遇到的问题
	4.1 swap的报错需要设置
		vim /etc/sysconfig/kubelet KUBELET_EXTRA_ARGS="--fail-swap-on=false"
	4.2 需要忽略的报错
		kubeadm init ----ignore-preflight-errors=Swap 如果mem和cpu不满足master的要求，也会报错
	4.3 初始化时，部分镜像无法下载
		查看需要使用到的镜像，人工下载（可以不需要人工下载，直接修改镜像源即可）
		kubeadm config images list
		根据查询结果，使用docker search 来下载对应版本的images
		docker pull louwy001/kube-scheduler:v1.21.0
   		docker pull louwy001/kube-proxy:v1.21.0
   		docker pull louwy001/pause:3.4.1
   		docker pull louwy001/etcd:3.4.13-0
   		docker pull louwy001/coredns:v1.8.0
   		docker pull louwy001/coredns:v1.8
   		docker pull louwy001/coredns-coredns:v1.8.0
		下载完成后，使用docker tag [已存在信息] [要求命名]
		重命名后，使用docker rmi [删除旧信息]
	4.4 初始化完成之后会返回本机master的信息如下
		kubeadm join 192.168.31.128:6443 --token 74rl2p.1n2m2gxezowqr7zs \
	--discovery-token-ca-cert-hash sha256:1532efc0f07b5b3d74acaf0729b7d3e461490ddc4b87671abd257f9a0ce0481b 
	4.5 其他节点如需加入需要执行
		kubeadm join --token <token> <master-ip>

5.安装节点网络插件
在Calico官网 上下载calico.yaml文件
wget https://docs.projectcalico.org/manifests/calico.yaml  修改IPV4_cidr 10.244.0.0/16
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml  再k8s-app下行添加type：NodePort
下载完成后执行
kubectl apply -f calico.yaml
kubectl apply -f recommended.yaml （安装dashboard UI）
kubectl get pods,svc -n 【namespace的名字】
创建用户
kubect1 create serviceaccount dashboard-admin -n kube-system
用户授权
kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
获取token
kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}'


	执行该yaml文件可能会遇到的问题
	5.1 The connection to the server localhost:8080 was refused - did you specify the right host or port?
		该报错需要配置~/.bash_profile环境变量
		echo “export KUBECONFIG=/etc/kubernetes/admin.conf” >> ~/.bash_profile
		source ~/.bash_profile

6.新建一个带nginx服务的pod
首先需要使用docker拉取nginx的镜像
docker pull nginx:latest
然后可以通过命令或yaml文件的方式创建pod（推荐使用yaml） 
【使用deploymnet控制器部署镜像】kubectl create deployment web --image-nginx --replicas=3
【使用service暴露pod】kubectl expose deployment web --port=80 --target-port=80 --type=NodePort   （port为集群内部端口，target-port为镜像内端口）
【使用yaml文件创建deployment】
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx2
  template:
    metadata:
      labels:
        app: nginx2
    spec:
      containers:
      - name: nginx
        image: nginx
【使用yaml文件创建service】
apiVersion: v1
kind: Service
metadata:
  name: web2
spec:
  selector:
    app: nginx2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort
	6.2 yaml文件创建
		vim nginx.yaml
#########内容############
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nginx
  template:
    metadata:
      labels:
        name: nginx
    spec:
      containers:
        - name: nginx
          image: docker.io/nginx:latest
          imagePullPolicy: IfNotPresent
	  ports:
            - containerPort: 80
	  env:
            - name: TZ
              value: Asia/Shanghai
	  volumeMounts:
            - name: volume-data
              mountPath: "/usr/share/nginx/html"
            - name: nginx-conf
              mountPath: "/etc/nginx/conf.d"
      volumes:
        - name: volume-data
          hostPath:
            path: /usr/local/nginx/html
        - name: nginx-conf
          hostPath:
            path: /usr/local/nginx/conf.d
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-nodeport
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    name: nginx
#########内容############
部署yaml编写的pod
kubectl apply -f nginx.yaml
允许主节点部署pod
kubectl taint nodes --all node-role.kubernetes.io/master-
如果不允许调度
kubectl taint nodes master1 node-role.kubernetes.io/master=:NoSchedule
污点可选参数
      NoSchedule: 一定不能被调度
      PreferNoSchedule: 尽量不要调度
      NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod

7.关于kubectl的相关命令
查看节点信息
kubectl get node
查看pod信息，及查看pod详情，加name查看对应pod
kubectl get pod [name] -o wide
删除pod
kubectl delete pod [name]
遇到删不掉的pod时，是因为yaml中使用了deployment，需要先删除deployments
kubectl delete deployments [name]
kubectl get deploymenets (查看)
服务起来以后，查看对应映射的端口号
kubectl get svc
kubectl delete svc [name] 删除
svc也通过nginx-svc.yml新建
kubectl apply -f nginx-svc.yml
vim nginx-svc.yml
#########内容############
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  type: NodePort
  selector:
    name: nginx
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 80
#########内容############
查看pod节点详情
kubectl describe po
查看pod节点日志
kubectl logs -f pod_name
查看service关联的pod
kubectl get endpoints

检查是否创建了副本控制器 ：ReplicationController：kubectl get rc
检查是否创建了副本集 ：replicasets：kubectl get rs
